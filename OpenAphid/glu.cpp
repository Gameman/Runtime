/*
Copyright 2012 Aphid Mobile

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 */

/*
 * cocos2d for iPhone: http://www.cocos2d-iphone.org
 *
 * Copyright (c) 2010 Ricardo Quesada
 * Copyright (c) 2011 Zynga Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 *
 * File autogenerated with Xcode. Adapted for cocos2d needs.
 */

#include <config.h>
#include "glu.h"

#include <math.h>
#include "OAData.h"
#include "ccTypes.h"
#include "G2DMacros.h"

#include "OpenGLES.inc.h"

namespace Aphid {
  void gluPerspective(GLfloat fovy, GLfloat aspect, GLfloat zNear, GLfloat zFar)
  {
	  GLfloat xmin, xmax, ymin, ymax;

	  ymax = zNear * (GLfloat) tanf(fovy * (float) M_PI / 360);
	  ymin = -ymax;
	  xmin = ymin * aspect;
	  xmax = ymax * aspect;

	  glFrustumf(xmin, xmax,
		  ymin, ymax,
		  zNear, zFar);
  }

  void gluLookAt(GLfloat eyex, GLfloat eyey, GLfloat eyez,
	  GLfloat centerx, GLfloat centery, GLfloat centerz,
	  GLfloat upx, GLfloat upy, GLfloat upz)
  {
	  GLfloat m[16];
	  GLfloat x[3], y[3], z[3];
	  GLfloat mag;

	  /* Make rotation matrix */

	  /* Z vector */
	  z[0] = eyex - centerx;
	  z[1] = eyey - centery;
	  z[2] = eyez - centerz;
	  mag = (float) sqrtf(z[0] * z[0] + z[1] * z[1] + z[2] * z[2]);
	  if (mag) {
		  z[0] /= mag;
		  z[1] /= mag;
		  z[2] /= mag;
	  }

	  /* Y vector */
	  y[0] = upx;
	  y[1] = upy;
	  y[2] = upz;

	  /* X vector = Y cross Z */
	  x[0] = y[1] * z[2] - y[2] * z[1];
	  x[1] = -y[0] * z[2] + y[2] * z[0];
	  x[2] = y[0] * z[1] - y[1] * z[0];

	  /* Recompute Y = Z cross X */
	  y[0] = z[1] * x[2] - z[2] * x[1];
	  y[1] = -z[0] * x[2] + z[2] * x[0];
	  y[2] = z[0] * x[1] - z[1] * x[0];

	  /* cross product gives area of parallelogram, which is < 1.0 for
				 * non-perpendicular unit-length vectors; so normalize x, y here
				 */

	  mag = (float) sqrtf(x[0] * x[0] + x[1] * x[1] + x[2] * x[2]);
	  if (mag) {
		  x[0] /= mag;
		  x[1] /= mag;
		  x[2] /= mag;
	  }

	  mag = (float) sqrtf(y[0] * y[0] + y[1] * y[1] + y[2] * y[2]);
	  if (mag) {
		  y[0] /= mag;
		  y[1] /= mag;
		  y[2] /= mag;
	  }

#define M(row,col)  m[col*4+row]
	  M(0, 0) = x[0];
	  M(0, 1) = x[1];
	  M(0, 2) = x[2];
	  M(0, 3) = 0.0f;
	  M(1, 0) = y[0];
	  M(1, 1) = y[1];
	  M(1, 2) = y[2];
	  M(1, 3) = 0.0f;
	  M(2, 0) = z[0];
	  M(2, 1) = z[1];
	  M(2, 2) = z[2];
	  M(2, 3) = 0.0f;
	  M(3, 0) = 0.0f;
	  M(3, 1) = 0.0f;
	  M(3, 2) = 0.0f;
	  M(3, 3) = 1.0f;
#undef M

	  glMultMatrixf(m);


	  /* Translate Eye to Origin */
	  glTranslatef(-eyex, -eyey, -eyez);
  }

  void AffineToGL(const AffineTransform *t, GLfloat *m)
  {
	  // | m[0] m[4] m[8]  m[12] |     | m11 m21 m31 m41 |     | a c 0 tx |
	  // | m[1] m[5] m[9]  m[13] |     | m12 m22 m32 m42 |     | b d 0 ty |
	  // | m[2] m[6] m[10] m[14] | <=> | m13 m23 m33 m43 | <=> | 0 0 1  0 |
	  // | m[3] m[7] m[11] m[15] |     | m14 m24 m34 m44 |     | 0 0 0  1 |

	  m[2] = m[3] = m[6] = m[7] = m[8] = m[9] = m[11] = m[14] = 0.0f;
	  m[10] = m[15] = 1.0f;
	  m[0] = t->a;
	  m[4] = t->c;
	  m[12] = t->tx;
	  m[1] = t->b;
	  m[5] = t->d;
	  m[13] = t->ty;
  }

  void GLToAffine(const GLfloat *m, AffineTransform *t)
  {
	  t->a = m[0];
	  t->c = m[4];
	  t->tx = m[12];
	  t->b = m[1];
	  t->d = m[5];
	  t->ty = m[13];
  }

  void ccDrawPoint(Point point)
  {
	  ccVertex2F p = (ccVertex2F) {point.x * G2D_CONTENT_SCALE_FACTOR(), point.y * G2D_CONTENT_SCALE_FACTOR()};

	  // Default GL states: GL_TEXTURE_2D, GL_VERTEX_ARRAY, GL_COLOR_ARRAY, GL_TEXTURE_COORD_ARRAY
	  // Needed states: GL_VERTEX_ARRAY,
	  // Unneeded states: GL_TEXTURE_2D, GL_TEXTURE_COORD_ARRAY, GL_COLOR_ARRAY
	  glDisable(GL_TEXTURE_2D);
	  glDisableClientState(GL_TEXTURE_COORD_ARRAY);
	  glDisableClientState(GL_COLOR_ARRAY);

	  glVertexPointer(2, GL_FLOAT, 0, &p);
	  glDrawArrays(GL_POINTS, 0, 1);

	  // restore default state
	  glEnableClientState(GL_COLOR_ARRAY);
	  glEnableClientState(GL_TEXTURE_COORD_ARRAY);
	  glEnable(GL_TEXTURE_2D);
  }

  void ccDrawPoints(const Point *points, size_t numberOfPoints)
  {
	  // Default GL states: GL_TEXTURE_2D, GL_VERTEX_ARRAY, GL_COLOR_ARRAY, GL_TEXTURE_COORD_ARRAY
	  // Needed states: GL_VERTEX_ARRAY,
	  // Unneeded states: GL_TEXTURE_2D, GL_TEXTURE_COORD_ARRAY, GL_COLOR_ARRAY
	  glDisable(GL_TEXTURE_2D);
	  glDisableClientState(GL_TEXTURE_COORD_ARRAY);
	  glDisableClientState(GL_COLOR_ARRAY);

	  ccVertex2F newPoints[numberOfPoints];

	  // iPhone and 32-bit machines optimization
	  if (sizeof(Point) == sizeof(ccVertex2F)) {

		  // points ?
		  if (G2D_CONTENT_SCALE_FACTOR() != 1) {
			  for (size_t i = 0; i < numberOfPoints; i++)
				  newPoints[i] = (ccVertex2F) {points[i].x * G2D_CONTENT_SCALE_FACTOR(), points[i].y * G2D_CONTENT_SCALE_FACTOR()};

			  glVertexPointer(2, GL_FLOAT, 0, newPoints);

		  } else
			  glVertexPointer(2, GL_FLOAT, 0, points);

		  glDrawArrays(GL_POINTS, 0, (GLsizei) numberOfPoints);

	  } else {

		  // Mac on 64-bit
		  for (size_t i = 0; i < numberOfPoints; i++)
			  newPoints[i] = (ccVertex2F) {points[i].x, points[i].y};

		  glVertexPointer(2, GL_FLOAT, 0, newPoints);
		  glDrawArrays(GL_POINTS, 0, (GLsizei) numberOfPoints);

	  }


	  // restore default state
	  glEnableClientState(GL_COLOR_ARRAY);
	  glEnableClientState(GL_TEXTURE_COORD_ARRAY);
	  glEnable(GL_TEXTURE_2D);
  }


  void ccDrawLine(Point origin, Point destination)
  {
	  ccVertex2F vertices[2] = {
		  {origin.x * G2D_CONTENT_SCALE_FACTOR(), origin.y * G2D_CONTENT_SCALE_FACTOR()},
		  {destination.x * G2D_CONTENT_SCALE_FACTOR(), destination.y * G2D_CONTENT_SCALE_FACTOR()}
	  };

	  // Default GL states: GL_TEXTURE_2D, GL_VERTEX_ARRAY, GL_COLOR_ARRAY, GL_TEXTURE_COORD_ARRAY
	  // Needed states: GL_VERTEX_ARRAY,
	  // Unneeded states: GL_TEXTURE_2D, GL_TEXTURE_COORD_ARRAY, GL_COLOR_ARRAY
	  glDisable(GL_TEXTURE_2D);
	  glDisableClientState(GL_TEXTURE_COORD_ARRAY);
	  glDisableClientState(GL_COLOR_ARRAY);

	  glVertexPointer(2, GL_FLOAT, 0, vertices);
	  glDrawArrays(GL_LINES, 0, 2);

	  // restore default state
	  glEnableClientState(GL_COLOR_ARRAY);
	  glEnableClientState(GL_TEXTURE_COORD_ARRAY);
	  glEnable(GL_TEXTURE_2D);
  }


  void ccDrawPoly(const Point *poli, size_t numberOfPoints, bool closePolygon)
  {
	  ccVertex2F newPoint[numberOfPoints];

	  // Default GL states: GL_TEXTURE_2D, GL_VERTEX_ARRAY, GL_COLOR_ARRAY, GL_TEXTURE_COORD_ARRAY
	  // Needed states: GL_VERTEX_ARRAY,
	  // Unneeded states: GL_TEXTURE_2D, GL_TEXTURE_COORD_ARRAY, GL_COLOR_ARRAY
	  glDisable(GL_TEXTURE_2D);
	  glDisableClientState(GL_TEXTURE_COORD_ARRAY);
	  glDisableClientState(GL_COLOR_ARRAY);


	  // iPhone and 32-bit machines
	  if (sizeof(Point) == sizeof(ccVertex2F)) {

		  // convert to pixels ?
		  if (G2D_CONTENT_SCALE_FACTOR() != 1) {
			  memcpy(newPoint, poli, numberOfPoints * sizeof(ccVertex2F));
			  for (size_t i = 0; i < numberOfPoints; i++)
				  newPoint[i] = (ccVertex2F) {poli[i].x * G2D_CONTENT_SCALE_FACTOR(), poli[i].y * G2D_CONTENT_SCALE_FACTOR()};

			  glVertexPointer(2, GL_FLOAT, 0, newPoint);

		  } else
			  glVertexPointer(2, GL_FLOAT, 0, poli);


	  } else {
		  // 64-bit machines (Mac)

		  for (size_t i = 0; i < numberOfPoints; i++)
			  newPoint[i] = (ccVertex2F) {poli[i].x, poli[i].y};

		  glVertexPointer(2, GL_FLOAT, 0, newPoint);

	  }

	  if (closePolygon)
		  glDrawArrays(GL_LINE_LOOP, 0, (GLsizei) numberOfPoints);
	  else
		  glDrawArrays(GL_LINE_STRIP, 0, (GLsizei) numberOfPoints);

	  // restore default state
	  glEnableClientState(GL_COLOR_ARRAY);
	  glEnableClientState(GL_TEXTURE_COORD_ARRAY);
	  glEnable(GL_TEXTURE_2D);
  }

  void ccDrawCircle(Point center, float r, float a, size_t segs, bool drawLineToCenter)
  {
	  int additionalSegment = 1;
	  if (drawLineToCenter)
		  additionalSegment++;

	  const float coef = 2.0f * (float) M_PI / segs;

	  GLfloat *vertices = (GLfloat *) calloc(sizeof(GLfloat) * 2 * (segs + 2), 1);
	  if (!vertices)
		  return;

	  for (size_t i = 0; i <= segs; i++) {
		  float rads = i * coef;
		  GLfloat j = r * cosf(rads + a) + center.x;
		  GLfloat k = r * sinf(rads + a) + center.y;

		  vertices[i * 2] = j * G2D_CONTENT_SCALE_FACTOR();
		  vertices[i * 2 + 1] = k * G2D_CONTENT_SCALE_FACTOR();
	  }
	  vertices[(segs + 1) * 2] = center.x * G2D_CONTENT_SCALE_FACTOR();
	  vertices[(segs + 1) * 2 + 1] = center.y * G2D_CONTENT_SCALE_FACTOR();

	  // Default GL states: GL_TEXTURE_2D, GL_VERTEX_ARRAY, GL_COLOR_ARRAY, GL_TEXTURE_COORD_ARRAY
	  // Needed states: GL_VERTEX_ARRAY,
	  // Unneeded states: GL_TEXTURE_2D, GL_TEXTURE_COORD_ARRAY, GL_COLOR_ARRAY
	  glDisable(GL_TEXTURE_2D);
	  glDisableClientState(GL_TEXTURE_COORD_ARRAY);
	  glDisableClientState(GL_COLOR_ARRAY);

	  glVertexPointer(2, GL_FLOAT, 0, vertices);
	  glDrawArrays(GL_LINE_STRIP, 0, (GLsizei) segs + additionalSegment);

	  // restore default state
	  glEnableClientState(GL_COLOR_ARRAY);
	  glEnableClientState(GL_TEXTURE_COORD_ARRAY);
	  glEnable(GL_TEXTURE_2D);

	  free(vertices);
  }

  void ccDrawQuadBezier(Point origin, Point control, Point destination, size_t segments)
  {
	  ccVertex2F vertices[segments + 1];

	  float t = 0.0f;
	  for (size_t i = 0; i < segments; i++) {
		  GLfloat x = powf(1 - t, 2) * origin.x + 2.0f * (1 - t) * t * control.x + t * t * destination.x;
		  GLfloat y = powf(1 - t, 2) * origin.y + 2.0f * (1 - t) * t * control.y + t * t * destination.y;
		  vertices[i] = (ccVertex2F) {x * G2D_CONTENT_SCALE_FACTOR(), y * G2D_CONTENT_SCALE_FACTOR()};
		  t += 1.0f / segments;
	  }
	  vertices[segments] = (ccVertex2F) {destination.x * G2D_CONTENT_SCALE_FACTOR(), destination.y * G2D_CONTENT_SCALE_FACTOR()};

	  // Default GL states: GL_TEXTURE_2D, GL_VERTEX_ARRAY, GL_COLOR_ARRAY, GL_TEXTURE_COORD_ARRAY
	  // Needed states: GL_VERTEX_ARRAY,
	  // Unneeded states: GL_TEXTURE_2D, GL_TEXTURE_COORD_ARRAY, GL_COLOR_ARRAY
	  glDisable(GL_TEXTURE_2D);
	  glDisableClientState(GL_TEXTURE_COORD_ARRAY);
	  glDisableClientState(GL_COLOR_ARRAY);

	  glVertexPointer(2, GL_FLOAT, 0, vertices);
	  glDrawArrays(GL_LINE_STRIP, 0, (GLsizei) segments + 1);

	  // restore default state
	  glEnableClientState(GL_COLOR_ARRAY);
	  glEnableClientState(GL_TEXTURE_COORD_ARRAY);
	  glEnable(GL_TEXTURE_2D);
  }

  void ccDrawCubicBezier(Point origin, Point control1, Point control2, Point destination, size_t segments)
  {
	  ccVertex2F vertices[segments + 1];

	  float t = 0;
	  for (size_t i = 0; i < segments; i++) {
		  GLfloat x = powf(1 - t, 3) * origin.x + 3.0f * powf(1 - t, 2) * t * control1.x + 3.0f * (1 - t) * t * t * control2.x + t * t * t * destination.x;
		  GLfloat y = powf(1 - t, 3) * origin.y + 3.0f * powf(1 - t, 2) * t * control1.y + 3.0f * (1 - t) * t * t * control2.y + t * t * t * destination.y;
		  vertices[i] = (ccVertex2F) {x * G2D_CONTENT_SCALE_FACTOR(), y * G2D_CONTENT_SCALE_FACTOR()};
		  t += 1.0f / segments;
	  }
	  vertices[segments] = (ccVertex2F) {destination.x * G2D_CONTENT_SCALE_FACTOR(), destination.y * G2D_CONTENT_SCALE_FACTOR()};

	  // Default GL states: GL_TEXTURE_2D, GL_VERTEX_ARRAY, GL_COLOR_ARRAY, GL_TEXTURE_COORD_ARRAY
	  // Needed states: GL_VERTEX_ARRAY,
	  // Unneeded states: GL_TEXTURE_2D, GL_TEXTURE_COORD_ARRAY, GL_COLOR_ARRAY
	  glDisable(GL_TEXTURE_2D);
	  glDisableClientState(GL_TEXTURE_COORD_ARRAY);
	  glDisableClientState(GL_COLOR_ARRAY);

	  glVertexPointer(2, GL_FLOAT, 0, vertices);
	  glDrawArrays(GL_LINE_STRIP, 0, (GLsizei) segments + 1);

	  // restore default state
	  glEnableClientState(GL_COLOR_ARRAY);
	  glEnableClientState(GL_TEXTURE_COORD_ARRAY);
	  glEnable(GL_TEXTURE_2D);
  }


}