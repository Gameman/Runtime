/*
Copyright 2012 Aphid Mobile

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 */

/*
 * cocos2d for iPhone: http://www.cocos2d-iphone.org
 *
 * Copyright (c) 2010 Ricardo Quesada
 * Copyright (c) 2011 Zynga Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 *
 * File autogenerated with Xcode. Adapted for cocos2d needs.
 */

#ifndef OpenAphid_glu_h
#define OpenAphid_glu_h

#include "OAData.h"

namespace Aphid {

  void gluLookAt(float eyeX, float eyeY, float eyeZ, float lookAtX, float lookAtY, float lookAtZ, float upX, float upY, float upZ);

  void gluPerspective(float fovy, float aspect, float zNear, float zFar);

  void AffineToGL(const AffineTransform *t, float *m);

  void GLToAffine(const float *m, AffineTransform *t);

  /** draws a point given x and y coordinate measured in points. */
  void ccDrawPoint(Point point);

  /** draws an array of points.
		 @since v0.7.2
		 */
  void ccDrawPoints(const Point *points, size_t numberOfPoints);

  /** draws a line given the origin and destination point measured in points. */
  void ccDrawLine(Point origin, Point destination);

  /** draws a poligon given a pointer to CGPoint coordiantes and the number of vertices measured in points.
		 The polygon can be closed or open
		 */
  void ccDrawPoly(const Point *vertices, size_t numOfVertices, bool closePolygon);

  /** draws a circle given the center, radius and number of segments measured in points */
  void ccDrawCircle(Point center, float radius, float angle, size_t segments, bool drawLineToCenter);

  /** draws a quad bezier path measured in points.
		 @since v0.8
		 */
  void ccDrawQuadBezier(Point origin, Point control, Point destination, size_t segments);

  /** draws a cubic bezier path measured in points.
		 @since v0.8
		 */
  void ccDrawCubicBezier(Point origin, Point control1, Point control2, Point destination, size_t segments);

}


#endif
